### Running with solver eld
### Entire output:
{
  errors: [
    {
      component: [32m'general'[39m,
      errorCode: [32m'7737'[39m,
      formattedMessage: [32m'Warning: Inline assembly may cause SMTChecker to produce spurious warnings (false positives).\n'[39m +
        [32m'  --> contracts/utils/Address.sol:32:9:\n'[39m +
        [32m'   |\n'[39m +
        [32m'32 |         assembly {\n'[39m +
        [32m'   |         ^ (Relevant source part starts here and spans across multiple lines).\n'[39m +
        [32m'\n'[39m,
      message: [32m'Inline assembly may cause SMTChecker to produce spurious warnings (false positives).'[39m,
      severity: [32m'warning'[39m,
      sourceLocation: [36m[Object][39m,
      type: [32m'Warning'[39m
    },
    {
      component: [32m'general'[39m,
      errorCode: [32m'4588'[39m,
      formattedMessage: [32m'Warning: Assertion checker does not yet implement this type of function call.\n'[39m +
        [32m'   --> contracts/utils/Address.sol:185:51:\n'[39m +
        [32m'    |\n'[39m +
        [32m'185 |         (bool success, bytes memory returndata) = target.delegatecall(data);\n'[39m +
        [32m'    |                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^\n'[39m +
        [32m'\n'[39m,
      message: [32m'Assertion checker does not yet implement this type of function call.'[39m,
      severity: [32m'warning'[39m,
      sourceLocation: [36m[Object][39m,
      type: [32m'Warning'[39m
    },
    {
      component: [32m'general'[39m,
      errorCode: [32m'7737'[39m,
      formattedMessage: [32m'Warning: Inline assembly may cause SMTChecker to produce spurious warnings (false positives).\n'[39m +
        [32m'   --> contracts/utils/Address.sol:207:17:\n'[39m +
        [32m'    |\n'[39m +
        [32m'207 |                 assembly {\n'[39m +
        [32m'    |                 ^ (Relevant source part starts here and spans across multiple lines).\n'[39m +
        [32m'\n'[39m,
      message: [32m'Inline assembly may cause SMTChecker to produce spurious warnings (false positives).'[39m,
      severity: [32m'warning'[39m,
      sourceLocation: [36m[Object][39m,
      type: [32m'Warning'[39m
    },
    {
      component: [32m'general'[39m,
      errorCode: [32m'1180'[39m,
      formattedMessage: [32m'Info: Contract invariant(s) for fileName:ERC777Property:\n'[39m +
        [32m'(((((((((_ERC1820_REGISTRY = 137743751162352440304869156374792304326613118244) && true) && (bytes_tuple_accessor_length(_name) = 6)) && (bytes_tuple_accessor_length(_symbol) = 2)) && true) && true) && true) && true) && ((((((((address(this) <= 1461501637330902918203684832716283019655932542975) && (address(this) >= 0)) && (_TOKENS_SENDER_INTERFACE_HASH <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)) && (_TOKENS_SENDER_INTERFACE_HASH >= 0)) && (_TOKENS_RECIPIENT_INTERFACE_HASH <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)) && (_TOKENS_RECIPIENT_INTERFACE_HASH >= 0)) && (address_array_tuple_accessor_length(_defaultOperatorsArray) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)) && (address_array_tuple_accessor_length(_defaultOperatorsArray) >= 0)))\n'[39m +
        [32m'Reentrancy property(ies) for fileName:ERC777Property:\n'[39m +
        [32m"((((((((_ERC1820_REGISTRY' = _ERC1820_REGISTRY) && (_name' = _name)) && (_symbol' = _symbol)) && (_TOKENS_SENDER_INTERFACE_HASH' = _TOKENS_SENDER_INTERFACE_HASH)) && (_TOKENS_RECIPIENT_INTERFACE_HASH' = _TOKENS_RECIPIENT_INTERFACE_HASH)) && (_defaultOperatorsArray' = _defaultOperatorsArray)) && (_defaultOperators' = _defaultOperators)) && ((((true && true) && true) && true) && (<errorCode> = 0)))\n"[39m +
        [32m'<errorCode> = 0 -> no errors\n'[39m +
        [32m'<errorCode> = 1 -> Assertion failed at assert(prevSupply == postSupply)\n'[39m +
        [32m'\n'[39m +
        [32m'\n'[39m,
      message: [32m'Contract invariant(s) for fileName:ERC777Property:\n'[39m +
        [32m'(((((((((_ERC1820_REGISTRY = 137743751162352440304869156374792304326613118244) && true) && (bytes_tuple_accessor_length(_name) = 6)) && (bytes_tuple_accessor_length(_symbol) = 2)) && true) && true) && true) && true) && ((((((((address(this) <= 1461501637330902918203684832716283019655932542975) && (address(this) >= 0)) && (_TOKENS_SENDER_INTERFACE_HASH <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)) && (_TOKENS_SENDER_INTERFACE_HASH >= 0)) && (_TOKENS_RECIPIENT_INTERFACE_HASH <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)) && (_TOKENS_RECIPIENT_INTERFACE_HASH >= 0)) && (address_array_tuple_accessor_length(_defaultOperatorsArray) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)) && (address_array_tuple_accessor_length(_defaultOperatorsArray) >= 0)))\n'[39m +
        [32m'Reentrancy property(ies) for fileName:ERC777Property:\n'[39m +
        [32m"((((((((_ERC1820_REGISTRY' = _ERC1820_REGISTRY) && (_name' = _name)) && (_symbol' = _symbol)) && (_TOKENS_SENDER_INTERFACE_HASH' = _TOKENS_SENDER_INTERFACE_HASH)) && (_TOKENS_RECIPIENT_INTERFACE_HASH' = _TOKENS_RECIPIENT_INTERFACE_HASH)) && (_defaultOperatorsArray' = _defaultOperatorsArray)) && (_defaultOperators' = _defaultOperators)) && ((((true && true) && true) && true) && (<errorCode> = 0)))\n"[39m +
        [32m'<errorCode> = 0 -> no errors\n'[39m +
        [32m'<errorCode> = 1 -> Assertion failed at assert(prevSupply == postSupply)\n'[39m,
      severity: [32m'info'[39m,
      type: [32m'Info'[39m
    }
  ],
  sources: {
    [32m'contracts/token/ERC20/IERC20.sol'[39m: { id: [33m0[39m },
    [32m'contracts/token/ERC777/ERC777_mutex.sol'[39m: { id: [33m1[39m },
    [32m'contracts/token/ERC777/IERC777.sol'[39m: { id: [33m2[39m },
    [32m'contracts/token/ERC777/IERC777Recipient.sol'[39m: { id: [33m3[39m },
    [32m'contracts/token/ERC777/IERC777Sender.sol'[39m: { id: [33m4[39m },
    [32m'contracts/utils/Address.sol'[39m: { id: [33m5[39m },
    [32m'contracts/utils/Context.sol'[39m: { id: [33m6[39m },
    [32m'contracts/utils/introspection/IERC1820Registry.sol'[39m: { id: [33m7[39m },
    fileName: { id: [33m8[39m }
  }
}
### End output
##### Solver eld invariants:
Info: Contract invariant(s) for fileName:ERC777Property:
(((((((((_ERC1820_REGISTRY = 137743751162352440304869156374792304326613118244) && true) && (bytes_tuple_accessor_length(_name) = 6)) && (bytes_tuple_accessor_length(_symbol) = 2)) && true) && true) && true) && true) && ((((((((address(this) <= 1461501637330902918203684832716283019655932542975) && (address(this) >= 0)) && (_TOKENS_SENDER_INTERFACE_HASH <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)) && (_TOKENS_SENDER_INTERFACE_HASH >= 0)) && (_TOKENS_RECIPIENT_INTERFACE_HASH <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)) && (_TOKENS_RECIPIENT_INTERFACE_HASH >= 0)) && (address_array_tuple_accessor_length(_defaultOperatorsArray) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)) && (address_array_tuple_accessor_length(_defaultOperatorsArray) >= 0)))
Reentrancy property(ies) for fileName:ERC777Property:
((((((((_ERC1820_REGISTRY' = _ERC1820_REGISTRY) && (_name' = _name)) && (_symbol' = _symbol)) && (_TOKENS_SENDER_INTERFACE_HASH' = _TOKENS_SENDER_INTERFACE_HASH)) && (_TOKENS_RECIPIENT_INTERFACE_HASH' = _TOKENS_RECIPIENT_INTERFACE_HASH)) && (_defaultOperatorsArray' = _defaultOperatorsArray)) && (_defaultOperators' = _defaultOperators)) && ((((true && true) && true) && true) && (<errorCode> = 0)))
<errorCode> = 0 -> no errors
<errorCode> = 1 -> Assertion failed at assert(prevSupply == postSupply)



##### End invariants


####### Final solving and time report:
Solver eld solved in 93200.31870007515ms
