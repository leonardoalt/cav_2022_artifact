[ '/home/solc-js', 'complex', '10' ]
/home/solc-js/regression/complex
### Running /home/solc-js/regression/complex/MerkleProof.sol ...
### ... with solver Eldarica Vanilla
### Entire output:
{
  errors: [
    {
      component: 'general',
      errorCode: '3805',
      formattedMessage: 'Warning: This is a pre-release compiler version, please do not use it in production.\n' +
        '\n',
      message: 'This is a pre-release compiler version, please do not use it in production.',
      severity: 'warning',
      type: 'Warning'
    },
    {
      component: 'general',
      errorCode: '1878',
      formattedMessage: 'Warning: SPDX license identifier not provided in source file. Before publishing, consider adding a comment containing "SPDX-License-Identifier: <SPDX-License>" to each source file. Use "SPDX-License-Identifier: UNLICENSED" for non-open-source code. Please see https://spdx.org for more information.\n' +
        '--> test\n' +
        '\n',
      message: 'SPDX license identifier not provided in source file. Before publishing, consider adding a comment containing "SPDX-License-Identifier: <SPDX-License>" to each source file. Use "SPDX-License-Identifier: UNLICENSED" for non-open-source code. Please see https://spdx.org for more information.',
      severity: 'warning',
      sourceLocation: [Object],
      type: 'Warning'
    },
    {
      component: 'general',
      errorCode: '3420',
      formattedMessage: 'Warning: Source file does not specify required compiler version!\n' +
        '--> test\n' +
        '\n',
      message: 'Source file does not specify required compiler version!',
      severity: 'warning',
      sourceLocation: [Object],
      type: 'Warning'
    }
  ],
  sources: { test: { id: 0 } }
}
### End output
### ... with solver Spacer Quant
### Entire output:
{
  errors: [
    {
      component: 'general',
      errorCode: '3805',
      formattedMessage: 'Warning: This is a pre-release compiler version, please do not use it in production.\n' +
        '\n',
      message: 'This is a pre-release compiler version, please do not use it in production.',
      severity: 'warning',
      type: 'Warning'
    },
    {
      component: 'general',
      errorCode: '1878',
      formattedMessage: 'Warning: SPDX license identifier not provided in source file. Before publishing, consider adding a comment containing "SPDX-License-Identifier: <SPDX-License>" to each source file. Use "SPDX-License-Identifier: UNLICENSED" for non-open-source code. Please see https://spdx.org for more information.\n' +
        '--> test\n' +
        '\n',
      message: 'SPDX license identifier not provided in source file. Before publishing, consider adding a comment containing "SPDX-License-Identifier: <SPDX-License>" to each source file. Use "SPDX-License-Identifier: UNLICENSED" for non-open-source code. Please see https://spdx.org for more information.',
      severity: 'warning',
      sourceLocation: [Object],
      type: 'Warning'
    },
    {
      component: 'general',
      errorCode: '3420',
      formattedMessage: 'Warning: Source file does not specify required compiler version!\n' +
        '--> test\n' +
        '\n',
      message: 'Source file does not specify required compiler version!',
      severity: 'warning',
      sourceLocation: [Object],
      type: 'Warning'
    }
  ],
  sources: { test: { id: 0 } }
}
### End output
### Running /home/solc-js/regression/complex/warn_on_typecast.sol ...
### ... with solver Eldarica Vanilla
### Entire output:
{
  errors: [
    {
      component: 'general',
      errorCode: '3805',
      formattedMessage: 'Warning: This is a pre-release compiler version, please do not use it in production.\n' +
        '\n',
      message: 'This is a pre-release compiler version, please do not use it in production.',
      severity: 'warning',
      type: 'Warning'
    },
    {
      component: 'general',
      errorCode: '1878',
      formattedMessage: 'Warning: SPDX license identifier not provided in source file. Before publishing, consider adding a comment containing "SPDX-License-Identifier: <SPDX-License>" to each source file. Use "SPDX-License-Identifier: UNLICENSED" for non-open-source code. Please see https://spdx.org for more information.\n' +
        '--> test\n' +
        '\n',
      message: 'SPDX license identifier not provided in source file. Before publishing, consider adding a comment containing "SPDX-License-Identifier: <SPDX-License>" to each source file. Use "SPDX-License-Identifier: UNLICENSED" for non-open-source code. Please see https://spdx.org for more information.',
      severity: 'warning',
      sourceLocation: [Object],
      type: 'Warning'
    },
    {
      component: 'general',
      errorCode: '3420',
      formattedMessage: 'Warning: Source file does not specify required compiler version!\n' +
        '--> test\n' +
        '\n',
      message: 'Source file does not specify required compiler version!',
      severity: 'warning',
      sourceLocation: [Object],
      type: 'Warning'
    }
  ],
  sources: { test: { id: 0 } }
}
### End output
### ... with solver Spacer Quant
### Entire output:
{
  errors: [
    {
      component: 'general',
      errorCode: '3805',
      formattedMessage: 'Warning: This is a pre-release compiler version, please do not use it in production.\n' +
        '\n',
      message: 'This is a pre-release compiler version, please do not use it in production.',
      severity: 'warning',
      type: 'Warning'
    },
    {
      component: 'general',
      errorCode: '1878',
      formattedMessage: 'Warning: SPDX license identifier not provided in source file. Before publishing, consider adding a comment containing "SPDX-License-Identifier: <SPDX-License>" to each source file. Use "SPDX-License-Identifier: UNLICENSED" for non-open-source code. Please see https://spdx.org for more information.\n' +
        '--> test\n' +
        '\n',
      message: 'SPDX license identifier not provided in source file. Before publishing, consider adding a comment containing "SPDX-License-Identifier: <SPDX-License>" to each source file. Use "SPDX-License-Identifier: UNLICENSED" for non-open-source code. Please see https://spdx.org for more information.',
      severity: 'warning',
      sourceLocation: [Object],
      type: 'Warning'
    },
    {
      component: 'general',
      errorCode: '3420',
      formattedMessage: 'Warning: Source file does not specify required compiler version!\n' +
        '--> test\n' +
        '\n',
      message: 'Source file does not specify required compiler version!',
      severity: 'warning',
      sourceLocation: [Object],
      type: 'Warning'
    }
  ],
  sources: { test: { id: 0 } }
}
### End output
### Running /home/solc-js/regression/complex/slither/const_state_variables.sol ...
### ... with solver Eldarica Vanilla
### Entire output:
{
  errors: [
    {
      component: 'general',
      errorCode: '3805',
      formattedMessage: 'Warning: This is a pre-release compiler version, please do not use it in production.\n' +
        '\n',
      message: 'This is a pre-release compiler version, please do not use it in production.',
      severity: 'warning',
      type: 'Warning'
    },
    {
      component: 'general',
      errorCode: '1878',
      formattedMessage: 'Warning: SPDX license identifier not provided in source file. Before publishing, consider adding a comment containing "SPDX-License-Identifier: <SPDX-License>" to each source file. Use "SPDX-License-Identifier: UNLICENSED" for non-open-source code. Please see https://spdx.org for more information.\n' +
        '--> test\n' +
        '\n',
      message: 'SPDX license identifier not provided in source file. Before publishing, consider adding a comment containing "SPDX-License-Identifier: <SPDX-License>" to each source file. Use "SPDX-License-Identifier: UNLICENSED" for non-open-source code. Please see https://spdx.org for more information.',
      severity: 'warning',
      sourceLocation: [Object],
      type: 'Warning'
    },
    {
      component: 'general',
      errorCode: '3420',
      formattedMessage: 'Warning: Source file does not specify required compiler version!\n' +
        '--> test\n' +
        '\n',
      message: 'Source file does not specify required compiler version!',
      severity: 'warning',
      sourceLocation: [Object],
      type: 'Warning'
    },
    {
      component: 'general',
      errorCode: '2519',
      formattedMessage: 'Warning: This declaration shadows an existing declaration.\n' +
        '  --> test:39:5:\n' +
        '   |\n' +
        '39 |     uint constant A = 1;\n' +
        '   |     ^^^^^^^^^^^^^^^^^^^\n' +
        'Note: The shadowed declaration is here:\n' +
        ' --> test:2:1:\n' +
        '  |\n' +
        '2 | contract A {\n' +
        '  | ^ (Relevant source part starts here and spans across multiple lines).\n' +
        '\n',
      message: 'This declaration shadows an existing declaration.',
      secondarySourceLocations: [Array],
      severity: 'warning',
      sourceLocation: [Object],
      type: 'Warning'
    },
    {
      component: 'general',
      errorCode: '2018',
      formattedMessage: 'Warning: Function state mutability can be restricted to view\n' +
        '  --> test:46:5:\n' +
        '   |\n' +
        '46 |     function getNumber() public returns(uint){\n' +
        '   |     ^ (Relevant source part starts here and spans across multiple lines).\n' +
        '\n',
      message: 'Function state mutability can be restricted to view',
      severity: 'warning',
      sourceLocation: [Object],
      type: 'Warning'
    }
  ],
  sources: { test: { id: 0 } }
}
### End output
### ... with solver Spacer Quant
### Entire output:
{
  errors: [
    {
      component: 'general',
      errorCode: '3805',
      formattedMessage: 'Warning: This is a pre-release compiler version, please do not use it in production.\n' +
        '\n',
      message: 'This is a pre-release compiler version, please do not use it in production.',
      severity: 'warning',
      type: 'Warning'
    },
    {
      component: 'general',
      errorCode: '1878',
      formattedMessage: 'Warning: SPDX license identifier not provided in source file. Before publishing, consider adding a comment containing "SPDX-License-Identifier: <SPDX-License>" to each source file. Use "SPDX-License-Identifier: UNLICENSED" for non-open-source code. Please see https://spdx.org for more information.\n' +
        '--> test\n' +
        '\n',
      message: 'SPDX license identifier not provided in source file. Before publishing, consider adding a comment containing "SPDX-License-Identifier: <SPDX-License>" to each source file. Use "SPDX-License-Identifier: UNLICENSED" for non-open-source code. Please see https://spdx.org for more information.',
      severity: 'warning',
      sourceLocation: [Object],
      type: 'Warning'
    },
    {
      component: 'general',
      errorCode: '3420',
      formattedMessage: 'Warning: Source file does not specify required compiler version!\n' +
        '--> test\n' +
        '\n',
      message: 'Source file does not specify required compiler version!',
      severity: 'warning',
      sourceLocation: [Object],
      type: 'Warning'
    },
    {
      component: 'general',
      errorCode: '2519',
      formattedMessage: 'Warning: This declaration shadows an existing declaration.\n' +
        '  --> test:39:5:\n' +
        '   |\n' +
        '39 |     uint constant A = 1;\n' +
        '   |     ^^^^^^^^^^^^^^^^^^^\n' +
        'Note: The shadowed declaration is here:\n' +
        ' --> test:2:1:\n' +
        '  |\n' +
        '2 | contract A {\n' +
        '  | ^ (Relevant source part starts here and spans across multiple lines).\n' +
        '\n',
      message: 'This declaration shadows an existing declaration.',
      secondarySourceLocations: [Array],
      severity: 'warning',
      sourceLocation: [Object],
      type: 'Warning'
    },
    {
      component: 'general',
      errorCode: '2018',
      formattedMessage: 'Warning: Function state mutability can be restricted to view\n' +
        '  --> test:46:5:\n' +
        '   |\n' +
        '46 |     function getNumber() public returns(uint){\n' +
        '   |     ^ (Relevant source part starts here and spans across multiple lines).\n' +
        '\n',
      message: 'Function state mutability can be restricted to view',
      severity: 'warning',
      sourceLocation: [Object],
      type: 'Warning'
    }
  ],
  sources: { test: { id: 0 } }
}
### End output
### Running /home/solc-js/regression/complex/slither/data_dependency.sol ...
### ... with solver Eldarica Vanilla
### Entire output:
{
  errors: [
    {
      component: 'general',
      errorCode: '3805',
      formattedMessage: 'Warning: This is a pre-release compiler version, please do not use it in production.\n' +
        '\n',
      message: 'This is a pre-release compiler version, please do not use it in production.',
      severity: 'warning',
      type: 'Warning'
    },
    {
      component: 'general',
      errorCode: '1878',
      formattedMessage: 'Warning: SPDX license identifier not provided in source file. Before publishing, consider adding a comment containing "SPDX-License-Identifier: <SPDX-License>" to each source file. Use "SPDX-License-Identifier: UNLICENSED" for non-open-source code. Please see https://spdx.org for more information.\n' +
        '--> test\n' +
        '\n',
      message: 'SPDX license identifier not provided in source file. Before publishing, consider adding a comment containing "SPDX-License-Identifier: <SPDX-License>" to each source file. Use "SPDX-License-Identifier: UNLICENSED" for non-open-source code. Please see https://spdx.org for more information.',
      severity: 'warning',
      sourceLocation: [Object],
      type: 'Warning'
    },
    {
      component: 'general',
      errorCode: '3420',
      formattedMessage: 'Warning: Source file does not specify required compiler version!\n' +
        '--> test\n' +
        '\n',
      message: 'Source file does not specify required compiler version!',
      severity: 'warning',
      sourceLocation: [Object],
      type: 'Warning'
    },
    {
      component: 'general',
      errorCode: '2018',
      formattedMessage: 'Warning: Function state mutability can be restricted to view\n' +
        '   --> test:114:3:\n' +
        '    |\n' +
        '114 |   function bar() internal returns (uint) {\n' +
        '    |   ^ (Relevant source part starts here and spans across multiple lines).\n' +
        '\n',
      message: 'Function state mutability can be restricted to view',
      severity: 'warning',
      sourceLocation: [Object],
      type: 'Warning'
    }
  ],
  sources: { test: { id: 0 } }
}
### End output
### ... with solver Spacer Quant
### Entire output:
{
  errors: [
    {
      component: 'general',
      errorCode: '3805',
      formattedMessage: 'Warning: This is a pre-release compiler version, please do not use it in production.\n' +
        '\n',
      message: 'This is a pre-release compiler version, please do not use it in production.',
      severity: 'warning',
      type: 'Warning'
    },
    {
      component: 'general',
      errorCode: '1878',
      formattedMessage: 'Warning: SPDX license identifier not provided in source file. Before publishing, consider adding a comment containing "SPDX-License-Identifier: <SPDX-License>" to each source file. Use "SPDX-License-Identifier: UNLICENSED" for non-open-source code. Please see https://spdx.org for more information.\n' +
        '--> test\n' +
        '\n',
      message: 'SPDX license identifier not provided in source file. Before publishing, consider adding a comment containing "SPDX-License-Identifier: <SPDX-License>" to each source file. Use "SPDX-License-Identifier: UNLICENSED" for non-open-source code. Please see https://spdx.org for more information.',
      severity: 'warning',
      sourceLocation: [Object],
      type: 'Warning'
    },
    {
      component: 'general',
      errorCode: '3420',
      formattedMessage: 'Warning: Source file does not specify required compiler version!\n' +
        '--> test\n' +
        '\n',
      message: 'Source file does not specify required compiler version!',
      severity: 'warning',
      sourceLocation: [Object],
      type: 'Warning'
    },
    {
      component: 'general',
      errorCode: '2018',
      formattedMessage: 'Warning: Function state mutability can be restricted to view\n' +
        '   --> test:114:3:\n' +
        '    |\n' +
        '114 |   function bar() internal returns (uint) {\n' +
        '    |   ^ (Relevant source part starts here and spans across multiple lines).\n' +
        '\n',
      message: 'Function state mutability can be restricted to view',
      severity: 'warning',
      sourceLocation: [Object],
      type: 'Warning'
    }
  ],
  sources: { test: { id: 0 } }
}
### End output
### Running /home/solc-js/regression/complex/slither/external_function.sol ...
### ... with solver Eldarica Vanilla
### Entire output:
{
  errors: [
    {
      component: 'general',
      errorCode: '3805',
      formattedMessage: 'Warning: This is a pre-release compiler version, please do not use it in production.\n' +
        '\n',
      message: 'This is a pre-release compiler version, please do not use it in production.',
      severity: 'warning',
      type: 'Warning'
    },
    {
      component: 'general',
      errorCode: '1878',
      formattedMessage: 'Warning: SPDX license identifier not provided in source file. Before publishing, consider adding a comment containing "SPDX-License-Identifier: <SPDX-License>" to each source file. Use "SPDX-License-Identifier: UNLICENSED" for non-open-source code. Please see https://spdx.org for more information.\n' +
        '--> test\n' +
        '\n',
      message: 'SPDX license identifier not provided in source file. Before publishing, consider adding a comment containing "SPDX-License-Identifier: <SPDX-License>" to each source file. Use "SPDX-License-Identifier: UNLICENSED" for non-open-source code. Please see https://spdx.org for more information.',
      severity: 'warning',
      sourceLocation: [Object],
      type: 'Warning'
    },
    {
      component: 'general',
      errorCode: '3420',
      formattedMessage: 'Warning: Source file does not specify required compiler version!\n' +
        '--> test\n' +
        '\n',
      message: 'Source file does not specify required compiler version!',
      severity: 'warning',
      sourceLocation: [Object],
      type: 'Warning'
    },
    {
      component: 'general',
      errorCode: '9302',
      formattedMessage: 'Warning: Return value of low-level calls not used.\n' +
        '  --> test:37:9:\n' +
        '   |\n' +
        '37 |         three.call(abi.encode(bytes4(keccak256("helloTwo()"))));\n' +
        '   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n' +
        '\n',
      message: 'Return value of low-level calls not used.',
      severity: 'warning',
      sourceLocation: [Object],
      type: 'Warning'
    },
    {
      component: 'general',
      errorCode: '2072',
      formattedMessage: 'Warning: Unused local variable.\n' +
        ' --> test:3:9:\n' +
        '  |\n' +
        '3 |         uint256 i = 0;\n' +
        '  |         ^^^^^^^^^\n' +
        '\n',
      message: 'Unused local variable.',
      severity: 'warning',
      sourceLocation: [Object],
      type: 'Warning'
    },
    {
      component: 'general',
      errorCode: '2072',
      formattedMessage: 'Warning: Unused local variable.\n' +
        ' --> test:9:9:\n' +
        '  |\n' +
        '9 |         uint256 i = 0;\n' +
        '  |         ^^^^^^^^^\n' +
        '\n',
      message: 'Unused local variable.',
      severity: 'warning',
      sourceLocation: [Object],
      type: 'Warning'
    },
    {
      component: 'general',
      errorCode: '2072',
      formattedMessage: 'Warning: Unused local variable.\n' +
        '  --> test:35:9:\n' +
        '   |\n' +
        '35 |         uint256 i = 0;\n' +
        '   |         ^^^^^^^^^\n' +
        '\n',
      message: 'Unused local variable.',
      severity: 'warning',
      sourceLocation: [Object],
      type: 'Warning'
    },
    {
      component: 'general',
      errorCode: '2018',
      formattedMessage: 'Warning: Function state mutability can be restricted to pure\n' +
        ' --> test:2:5:\n' +
        '  |\n' +
        '2 |     function funcCalled() external  {\n' +
        '  |     ^ (Relevant source part starts here and spans across multiple lines).\n' +
        '\n',
      message: 'Function state mutability can be restricted to pure',
      severity: 'warning',
      sourceLocation: [Object],
      type: 'Warning'
    },
    {
      component: 'general',
      errorCode: '2018',
      formattedMessage: 'Warning: Function state mutability can be restricted to pure\n' +
        ' --> test:8:5:\n' +
        '  |\n' +
        '8 |     function callWithSuper() public {\n' +
        '  |     ^ (Relevant source part starts here and spans across multiple lines).\n' +
        '\n',
      message: 'Function state mutability can be restricted to pure',
      severity: 'warning',
      sourceLocation: [Object],
      type: 'Warning'
    },
    {
      component: 'general',
      errorCode: '2018',
      formattedMessage: 'Warning: Function state mutability can be restricted to pure\n' +
        '  --> test:27:5:\n' +
        '   |\n' +
        '27 |     function my_func() internal returns(bool){\n' +
        '   |     ^ (Relevant source part starts here and spans across multiple lines).\n' +
        '\n',
      message: 'Function state mutability can be restricted to pure',
      severity: 'warning',
      sourceLocation: [Object],
      type: 'Warning'
    },
    {
      component: 'general',
      errorCode: '2018',
      formattedMessage: 'Warning: Function state mutability can be restricted to pure\n' +
        '  --> test:56:5:\n' +
        '   |\n' +
        '56 |     function test1() public returns(uint){\n' +
        '   |     ^ (Relevant source part starts here and spans across multiple lines).\n' +
        '\n',
      message: 'Function state mutability can be restricted to pure',
      severity: 'warning',
      sourceLocation: [Object],
      type: 'Warning'
    },
    {
      component: 'general',
      errorCode: '2018',
      formattedMessage: 'Warning: Function state mutability can be restricted to pure\n' +
        '  --> test:60:5:\n' +
        '   |\n' +
        '60 |     function test2() public returns(uint){\n' +
        '   |     ^ (Relevant source part starts here and spans across multiple lines).\n' +
        '\n',
      message: 'Function state mutability can be restricted to pure',
      severity: 'warning',
      sourceLocation: [Object],
      type: 'Warning'
    },
    {
      component: 'general',
      errorCode: '2018',
      formattedMessage: 'Warning: Function state mutability can be restricted to pure\n' +
        '  --> test:64:5:\n' +
        '   |\n' +
        '64 |     function test3() public returns(uint){\n' +
        '   |     ^ (Relevant source part starts here and spans across multiple lines).\n' +
        '\n',
      message: 'Function state mutability can be restricted to pure',
      severity: 'warning',
      sourceLocation: [Object],
      type: 'Warning'
    },
    {
      component: 'general',
      errorCode: '4588',
      formattedMessage: 'Warning: Assertion checker does not yet implement this type of function call.\n' +
        '  --> test:36:33:\n' +
        '   |\n' +
        '36 |         address three = address(new ContractWithFunctionNotCalled());\n' +
        '   |                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n' +
        '\n',
      message: 'Assertion checker does not yet implement this type of function call.',
      severity: 'warning',
      sourceLocation: [Object],
      type: 'Warning'
    },
    {
      component: 'general',
      errorCode: '4588',
      formattedMessage: 'Warning: Assertion checker does not yet implement this type of function call.\n' +
        '  --> test:39:40:\n' +
        '   |\n' +
        '39 |         ContractWithFunctionCalled c = new ContractWithFunctionCalled();\n' +
        '   |                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n' +
        '\n',
      message: 'Assertion checker does not yet implement this type of function call.',
      severity: 'warning',
      sourceLocation: [Object],
      type: 'Warning'
    }
  ],
  sources: { test: { id: 0 } }
}
### End output
### ... with solver Spacer Quant
### Entire output:
{
  errors: [
    {
      component: 'general',
      errorCode: '3805',
      formattedMessage: 'Warning: This is a pre-release compiler version, please do not use it in production.\n' +
        '\n',
      message: 'This is a pre-release compiler version, please do not use it in production.',
      severity: 'warning',
      type: 'Warning'
    },
    {
      component: 'general',
      errorCode: '1878',
      formattedMessage: 'Warning: SPDX license identifier not provided in source file. Before publishing, consider adding a comment containing "SPDX-License-Identifier: <SPDX-License>" to each source file. Use "SPDX-License-Identifier: UNLICENSED" for non-open-source code. Please see https://spdx.org for more information.\n' +
        '--> test\n' +
        '\n',
      message: 'SPDX license identifier not provided in source file. Before publishing, consider adding a comment containing "SPDX-License-Identifier: <SPDX-License>" to each source file. Use "SPDX-License-Identifier: UNLICENSED" for non-open-source code. Please see https://spdx.org for more information.',
      severity: 'warning',
      sourceLocation: [Object],
      type: 'Warning'
    },
    {
      component: 'general',
      errorCode: '3420',
      formattedMessage: 'Warning: Source file does not specify required compiler version!\n' +
        '--> test\n' +
        '\n',
      message: 'Source file does not specify required compiler version!',
      severity: 'warning',
      sourceLocation: [Object],
      type: 'Warning'
    },
    {
      component: 'general',
      errorCode: '9302',
      formattedMessage: 'Warning: Return value of low-level calls not used.\n' +
        '  --> test:37:9:\n' +
        '   |\n' +
        '37 |         three.call(abi.encode(bytes4(keccak256("helloTwo()"))));\n' +
        '   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n' +
        '\n',
      message: 'Return value of low-level calls not used.',
      severity: 'warning',
      sourceLocation: [Object],
      type: 'Warning'
    },
    {
      component: 'general',
      errorCode: '2072',
      formattedMessage: 'Warning: Unused local variable.\n' +
        ' --> test:3:9:\n' +
        '  |\n' +
        '3 |         uint256 i = 0;\n' +
        '  |         ^^^^^^^^^\n' +
        '\n',
      message: 'Unused local variable.',
      severity: 'warning',
      sourceLocation: [Object],
      type: 'Warning'
    },
    {
      component: 'general',
      errorCode: '2072',
      formattedMessage: 'Warning: Unused local variable.\n' +
        ' --> test:9:9:\n' +
        '  |\n' +
        '9 |         uint256 i = 0;\n' +
        '  |         ^^^^^^^^^\n' +
        '\n',
      message: 'Unused local variable.',
      severity: 'warning',
      sourceLocation: [Object],
      type: 'Warning'
    },
    {
      component: 'general',
      errorCode: '2072',
      formattedMessage: 'Warning: Unused local variable.\n' +
        '  --> test:35:9:\n' +
        '   |\n' +
        '35 |         uint256 i = 0;\n' +
        '   |         ^^^^^^^^^\n' +
        '\n',
      message: 'Unused local variable.',
      severity: 'warning',
      sourceLocation: [Object],
      type: 'Warning'
    },
    {
      component: 'general',
      errorCode: '2018',
      formattedMessage: 'Warning: Function state mutability can be restricted to pure\n' +
        ' --> test:2:5:\n' +
        '  |\n' +
        '2 |     function funcCalled() external  {\n' +
        '  |     ^ (Relevant source part starts here and spans across multiple lines).\n' +
        '\n',
      message: 'Function state mutability can be restricted to pure',
      severity: 'warning',
      sourceLocation: [Object],
      type: 'Warning'
    },
    {
      component: 'general',
      errorCode: '2018',
      formattedMessage: 'Warning: Function state mutability can be restricted to pure\n' +
        ' --> test:8:5:\n' +
        '  |\n' +
        '8 |     function callWithSuper() public {\n' +
        '  |     ^ (Relevant source part starts here and spans across multiple lines).\n' +
        '\n',
      message: 'Function state mutability can be restricted to pure',
      severity: 'warning',
      sourceLocation: [Object],
      type: 'Warning'
    },
    {
      component: 'general',
      errorCode: '2018',
      formattedMessage: 'Warning: Function state mutability can be restricted to pure\n' +
        '  --> test:27:5:\n' +
        '   |\n' +
        '27 |     function my_func() internal returns(bool){\n' +
        '   |     ^ (Relevant source part starts here and spans across multiple lines).\n' +
        '\n',
      message: 'Function state mutability can be restricted to pure',
      severity: 'warning',
      sourceLocation: [Object],
      type: 'Warning'
    },
    {
      component: 'general',
      errorCode: '2018',
      formattedMessage: 'Warning: Function state mutability can be restricted to pure\n' +
        '  --> test:56:5:\n' +
        '   |\n' +
        '56 |     function test1() public returns(uint){\n' +
        '   |     ^ (Relevant source part starts here and spans across multiple lines).\n' +
        '\n',
      message: 'Function state mutability can be restricted to pure',
      severity: 'warning',
      sourceLocation: [Object],
      type: 'Warning'
    },
    {
      component: 'general',
      errorCode: '2018',
      formattedMessage: 'Warning: Function state mutability can be restricted to pure\n' +
        '  --> test:60:5:\n' +
        '   |\n' +
        '60 |     function test2() public returns(uint){\n' +
        '   |     ^ (Relevant source part starts here and spans across multiple lines).\n' +
        '\n',
      message: 'Function state mutability can be restricted to pure',
      severity: 'warning',
      sourceLocation: [Object],
      type: 'Warning'
    },
    {
      component: 'general',
      errorCode: '2018',
      formattedMessage: 'Warning: Function state mutability can be restricted to pure\n' +
        '  --> test:64:5:\n' +
        '   |\n' +
        '64 |     function test3() public returns(uint){\n' +
        '   |     ^ (Relevant source part starts here and spans across multiple lines).\n' +
        '\n',
      message: 'Function state mutability can be restricted to pure',
      severity: 'warning',
      sourceLocation: [Object],
      type: 'Warning'
    },
    {
      component: 'general',
      errorCode: '4588',
      formattedMessage: 'Warning: Assertion checker does not yet implement this type of function call.\n' +
        '  --> test:36:33:\n' +
        '   |\n' +
        '36 |         address three = address(new ContractWithFunctionNotCalled());\n' +
        '   |                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n' +
        '\n',
      message: 'Assertion checker does not yet implement this type of function call.',
      severity: 'warning',
      sourceLocation: [Object],
      type: 'Warning'
    },
    {
      component: 'general',
      errorCode: '4588',
      formattedMessage: 'Warning: Assertion checker does not yet implement this type of function call.\n' +
        '  --> test:39:40:\n' +
        '   |\n' +
        '39 |         ContractWithFunctionCalled c = new ContractWithFunctionCalled();\n' +
        '   |                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n' +
        '\n',
      message: 'Assertion checker does not yet implement this type of function call.',
      severity: 'warning',
      sourceLocation: [Object],
      type: 'Warning'
    }
  ],
  sources: { test: { id: 0 } }
}
### End output
{"/home/solc-js/regression/complex/MerkleProof.sol":[{"notProved":0,"unsafe":0,"safe":0,"winner":true},{"notProved":0,"unsafe":0,"safe":0,"winner":true}],"/home/solc-js/regression/complex/warn_on_typecast.sol":[{"notProved":0,"unsafe":0,"safe":0,"winner":true},{"notProved":0,"unsafe":0,"safe":0,"winner":true}],"/home/solc-js/regression/complex/slither/const_state_variables.sol":[{"notProved":0,"unsafe":0,"safe":0,"winner":true},{"notProved":0,"unsafe":0,"safe":0,"winner":true}],"/home/solc-js/regression/complex/slither/data_dependency.sol":[{"notProved":0,"unsafe":0,"safe":0,"winner":true},{"notProved":0,"unsafe":0,"safe":0,"winner":true}],"/home/solc-js/regression/complex/slither/external_function.sol":[{"notProved":0,"unsafe":0,"safe":0,"winner":true},{"notProved":0,"unsafe":0,"safe":0,"winner":true}]}
Category		Total		Eldarica		Spacer Quant
complex		5		5		5
