### Running with solver Eldarica Vanilla
### Entire output:
{
  errors: [
    {
      component: [32m'general'[39m,
      errorCode: [32m'6328'[39m,
      formattedMessage: [32m'Warning: CHC: Assertion violation happens here.\n'[39m +
        [32m'Counterexample:\n'[39m +
        [32m'x = 1\n'[39m +
        [32m'\n'[39m +
        [32m'Transaction trace:\n'[39m +
        [32m'BinaryMachine.constructor()\n'[39m +
        [32m'State: x = 0\n'[39m +
        [32m'BinaryMachine.setOne()\n'[39m +
        [32m'State: x = 1\n'[39m +
        [32m'BinaryMachine.invariant()\n'[39m +
        [32m'  --> fileName:13:3:\n'[39m +
        [32m'   |\n'[39m +
        [32m'13 | \t\tassert(x < 1);\n'[39m +
        [32m'   | \t\t^^^^^^^^^^^^^\n'[39m +
        [32m'\n'[39m,
      message: [32m'CHC: Assertion violation happens here.\n'[39m +
        [32m'Counterexample:\n'[39m +
        [32m'x = 1\n'[39m +
        [32m'\n'[39m +
        [32m'Transaction trace:\n'[39m +
        [32m'BinaryMachine.constructor()\n'[39m +
        [32m'State: x = 0\n'[39m +
        [32m'BinaryMachine.setOne()\n'[39m +
        [32m'State: x = 1\n'[39m +
        [32m'BinaryMachine.invariant()'[39m,
      severity: [32m'warning'[39m,
      sourceLocation: [36m[Object][39m,
      type: [32m'Warning'[39m
    }
  ],
  sources: { fileName: { id: [33m0[39m } }
}
### End output
### Running with solver Eldarica No Abstraction
### Entire output:
{
  errors: [
    {
      component: [32m'general'[39m,
      errorCode: [32m'6328'[39m,
      formattedMessage: [32m'Warning: CHC: Assertion violation happens here.\n'[39m +
        [32m'Counterexample:\n'[39m +
        [32m'x = 1\n'[39m +
        [32m'\n'[39m +
        [32m'Transaction trace:\n'[39m +
        [32m'BinaryMachine.constructor()\n'[39m +
        [32m'State: x = 0\n'[39m +
        [32m'BinaryMachine.setOne()\n'[39m +
        [32m'State: x = 1\n'[39m +
        [32m'BinaryMachine.invariant()\n'[39m +
        [32m'  --> fileName:13:3:\n'[39m +
        [32m'   |\n'[39m +
        [32m'13 | \t\tassert(x < 1);\n'[39m +
        [32m'   | \t\t^^^^^^^^^^^^^\n'[39m +
        [32m'\n'[39m,
      message: [32m'CHC: Assertion violation happens here.\n'[39m +
        [32m'Counterexample:\n'[39m +
        [32m'x = 1\n'[39m +
        [32m'\n'[39m +
        [32m'Transaction trace:\n'[39m +
        [32m'BinaryMachine.constructor()\n'[39m +
        [32m'State: x = 0\n'[39m +
        [32m'BinaryMachine.setOne()\n'[39m +
        [32m'State: x = 1\n'[39m +
        [32m'BinaryMachine.invariant()'[39m,
      severity: [32m'warning'[39m,
      sourceLocation: [36m[Object][39m,
      type: [32m'Warning'[39m
    }
  ],
  sources: { fileName: { id: [33m0[39m } }
}
### End output
### Running with solver Eldarica Term Abstraction
### Entire output:
{
  errors: [
    {
      component: [32m'general'[39m,
      errorCode: [32m'6328'[39m,
      formattedMessage: [32m'Warning: CHC: Assertion violation happens here.\n'[39m +
        [32m'Counterexample:\n'[39m +
        [32m'x = 1\n'[39m +
        [32m'\n'[39m +
        [32m'Transaction trace:\n'[39m +
        [32m'BinaryMachine.constructor()\n'[39m +
        [32m'State: x = 0\n'[39m +
        [32m'BinaryMachine.setOne()\n'[39m +
        [32m'State: x = 1\n'[39m +
        [32m'BinaryMachine.invariant()\n'[39m +
        [32m'  --> fileName:13:3:\n'[39m +
        [32m'   |\n'[39m +
        [32m'13 | \t\tassert(x < 1);\n'[39m +
        [32m'   | \t\t^^^^^^^^^^^^^\n'[39m +
        [32m'\n'[39m,
      message: [32m'CHC: Assertion violation happens here.\n'[39m +
        [32m'Counterexample:\n'[39m +
        [32m'x = 1\n'[39m +
        [32m'\n'[39m +
        [32m'Transaction trace:\n'[39m +
        [32m'BinaryMachine.constructor()\n'[39m +
        [32m'State: x = 0\n'[39m +
        [32m'BinaryMachine.setOne()\n'[39m +
        [32m'State: x = 1\n'[39m +
        [32m'BinaryMachine.invariant()'[39m,
      severity: [32m'warning'[39m,
      sourceLocation: [36m[Object][39m,
      type: [32m'Warning'[39m
    }
  ],
  sources: { fileName: { id: [33m0[39m } }
}
### End output
### Running with solver Eldarica Oct Abstraction
### Entire output:
{
  errors: [
    {
      component: [32m'general'[39m,
      errorCode: [32m'6328'[39m,
      formattedMessage: [32m'Warning: CHC: Assertion violation happens here.\n'[39m +
        [32m'Counterexample:\n'[39m +
        [32m'x = 1\n'[39m +
        [32m'\n'[39m +
        [32m'Transaction trace:\n'[39m +
        [32m'BinaryMachine.constructor()\n'[39m +
        [32m'State: x = 0\n'[39m +
        [32m'BinaryMachine.setOne()\n'[39m +
        [32m'State: x = 1\n'[39m +
        [32m'BinaryMachine.invariant()\n'[39m +
        [32m'  --> fileName:13:3:\n'[39m +
        [32m'   |\n'[39m +
        [32m'13 | \t\tassert(x < 1);\n'[39m +
        [32m'   | \t\t^^^^^^^^^^^^^\n'[39m +
        [32m'\n'[39m,
      message: [32m'CHC: Assertion violation happens here.\n'[39m +
        [32m'Counterexample:\n'[39m +
        [32m'x = 1\n'[39m +
        [32m'\n'[39m +
        [32m'Transaction trace:\n'[39m +
        [32m'BinaryMachine.constructor()\n'[39m +
        [32m'State: x = 0\n'[39m +
        [32m'BinaryMachine.setOne()\n'[39m +
        [32m'State: x = 1\n'[39m +
        [32m'BinaryMachine.invariant()'[39m,
      severity: [32m'warning'[39m,
      sourceLocation: [36m[Object][39m,
      type: [32m'Warning'[39m
    }
  ],
  sources: { fileName: { id: [33m0[39m } }
}
### End output
### Running with solver Spacer Vanilla
### Entire output:
{
  errors: [
    {
      component: [32m'general'[39m,
      errorCode: [32m'6328'[39m,
      formattedMessage: [32m'Warning: CHC: Assertion violation happens here.\n'[39m +
        [32m'  --> fileName:13:3:\n'[39m +
        [32m'   |\n'[39m +
        [32m'13 | \t\tassert(x < 1);\n'[39m +
        [32m'   | \t\t^^^^^^^^^^^^^\n'[39m +
        [32m'\n'[39m,
      message: [32m'CHC: Assertion violation happens here.'[39m,
      severity: [32m'warning'[39m,
      sourceLocation: [36m[Object][39m,
      type: [32m'Warning'[39m
    }
  ],
  sources: { fileName: { id: [33m0[39m } }
}
### End output
### Running with solver Spacer Quant
### Entire output:
{
  errors: [
    {
      component: [32m'general'[39m,
      errorCode: [32m'6328'[39m,
      formattedMessage: [32m'Warning: CHC: Assertion violation happens here.\n'[39m +
        [32m'  --> fileName:13:3:\n'[39m +
        [32m'   |\n'[39m +
        [32m'13 | \t\tassert(x < 1);\n'[39m +
        [32m'   | \t\t^^^^^^^^^^^^^\n'[39m +
        [32m'\n'[39m,
      message: [32m'CHC: Assertion violation happens here.'[39m,
      severity: [32m'warning'[39m,
      sourceLocation: [36m[Object][39m,
      type: [32m'Warning'[39m
    }
  ],
  sources: { fileName: { id: [33m0[39m } }
}
### End output
##### Solver Eldarica Vanilla cex:
Warning: CHC: Assertion violation happens here.
Counterexample:
x = 1

Transaction trace:
BinaryMachine.constructor()
State: x = 0
BinaryMachine.setOne()
State: x = 1
BinaryMachine.invariant()
  --> fileName:13:3:
   |
13 | 		assert(x < 1);
   | 		^^^^^^^^^^^^^


##### End counterexample
##### Solver Eldarica No Abstraction cex:
Warning: CHC: Assertion violation happens here.
Counterexample:
x = 1

Transaction trace:
BinaryMachine.constructor()
State: x = 0
BinaryMachine.setOne()
State: x = 1
BinaryMachine.invariant()
  --> fileName:13:3:
   |
13 | 		assert(x < 1);
   | 		^^^^^^^^^^^^^


##### End counterexample
##### Solver Eldarica Term Abstraction cex:
Warning: CHC: Assertion violation happens here.
Counterexample:
x = 1

Transaction trace:
BinaryMachine.constructor()
State: x = 0
BinaryMachine.setOne()
State: x = 1
BinaryMachine.invariant()
  --> fileName:13:3:
   |
13 | 		assert(x < 1);
   | 		^^^^^^^^^^^^^


##### End counterexample
##### Solver Eldarica Oct Abstraction cex:
Warning: CHC: Assertion violation happens here.
Counterexample:
x = 1

Transaction trace:
BinaryMachine.constructor()
State: x = 0
BinaryMachine.setOne()
State: x = 1
BinaryMachine.invariant()
  --> fileName:13:3:
   |
13 | 		assert(x < 1);
   | 		^^^^^^^^^^^^^


##### End counterexample
##### Solver Spacer Vanilla cex:
Warning: CHC: Assertion violation happens here.
  --> fileName:13:3:
   |
13 | 		assert(x < 1);
   | 		^^^^^^^^^^^^^


##### End counterexample
##### Solver Spacer Quant cex:
Warning: CHC: Assertion violation happens here.
  --> fileName:13:3:
   |
13 | 		assert(x < 1);
   | 		^^^^^^^^^^^^^


##### End counterexample


####### Final solving and time report:
Solver Eldarica Vanilla solved in 3727.2335680127144ms
Solver Eldarica No Abstraction solved in 2517.7839189767838ms
Solver Eldarica Term Abstraction solved in 2244.6531389951706ms
Solver Eldarica Oct Abstraction solved in 1970.212123990059ms
Solver Spacer Vanilla solved in 81.71271902322769ms
Solver Spacer Quant solved in 62.95057702064514ms
